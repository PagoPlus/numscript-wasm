[TestPlainAddress - 1]
parser.Program{
    Statements: {
        &parser.SendStatement{
            Range: parser.Range{
                Start: parser.Position{},
                End:   parser.Position{Character:1, Line:3},
            },
            Monetary: &parser.MonetaryLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:5, Line:0},
                    End:   parser.Position{Character:16, Line:0},
                },
                Asset:  "EUR/2",
                Amount: 100,
            },
            Source: &parser.AccountLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:11, Line:1},
                    End:   parser.Position{Character:15, Line:1},
                },
                Name: "src",
            },
            Destination: &parser.AccountLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:16, Line:2},
                    End:   parser.Position{Character:21, Line:2},
                },
                Name: "dest",
            },
        },
    },
}
---

[TestVariable - 1]
parser.Program{
    Statements: {
        &parser.SendStatement{
            Range: parser.Range{
                Start: parser.Position{},
                End:   parser.Position{Character:1, Line:3},
            },
            Monetary: &parser.MonetaryLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:5, Line:0},
                    End:   parser.Position{Character:16, Line:0},
                },
                Asset:  "EUR/2",
                Amount: 100,
            },
            Source: &parser.VariableLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:11, Line:1},
                    End:   parser.Position{Character:27, Line:1},
                },
                Name: "example_var_src",
            },
            Destination: &parser.VariableLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:16, Line:2},
                    End:   parser.Position{Character:33, Line:2},
                },
                Name: "example_var_dest",
            },
        },
    },
}
---

[TestSeq - 1]
parser.Program{
    Statements: {
        &parser.SendStatement{
            Range: parser.Range{
                Start: parser.Position{},
                End:   parser.Position{Character:1, Line:3},
            },
            Monetary: &parser.MonetaryLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:5, Line:0},
                    End:   parser.Position{Character:16, Line:0},
                },
                Asset:  "EUR/2",
                Amount: 100,
            },
            Source: &parser.SourceSeq{
                Range: parser.Range{
                    Start: parser.Position{Character:11, Line:1},
                    End:   parser.Position{Character:22, Line:1},
                },
                Sources: {
                    &parser.AccountLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:13, Line:1},
                            End:   parser.Position{Character:16, Line:1},
                        },
                        Name: "s1",
                    },
                    &parser.AccountLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:17, Line:1},
                            End:   parser.Position{Character:20, Line:1},
                        },
                        Name: "s2",
                    },
                },
            },
            Destination: &parser.DestinationSeq{
                Range: parser.Range{
                    Start: parser.Position{Character:16, Line:2},
                    End:   parser.Position{Character:27, Line:2},
                },
                Destinations: {
                    &parser.AccountLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:18, Line:2},
                            End:   parser.Position{Character:21, Line:2},
                        },
                        Name: "d1",
                    },
                    &parser.AccountLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:22, Line:2},
                            End:   parser.Position{Character:25, Line:2},
                        },
                        Name: "d2",
                    },
                },
            },
        },
    },
}
---

[TestAllotment - 1]
parser.Program{
    Statements: {
        &parser.SendStatement{
            Range: parser.Range{
                Start: parser.Position{},
                End:   parser.Position{Character:1, Line:3},
            },
            Monetary: &parser.MonetaryLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:5, Line:0},
                    End:   parser.Position{Character:16, Line:0},
                },
                Asset:  "EUR/2",
                Amount: 100,
            },
            Source: &parser.SourceAllotment{
                Range: parser.Range{
                    Start: parser.Position{Character:11, Line:1},
                    End:   parser.Position{Character:27, Line:1},
                },
                Items: {
                    {
                        Range: parser.Range{
                            Start: parser.Position{Character:13, Line:1},
                            End:   parser.Position{Character:25, Line:1},
                        },
                        Allotment: &parser.RatioLiteral{
                            Range: parser.Range{
                                Start: parser.Position{Character:13, Line:1},
                                End:   parser.Position{Character:16, Line:1},
                            },
                            Numerator:   0x1,
                            Denominator: 0x3,
                        },
                        From: &parser.AccountLiteral{
                            Range: parser.Range{
                                Start: parser.Position{Character:22, Line:1},
                                End:   parser.Position{Character:25, Line:1},
                            },
                            Name: "s1",
                        },
                    },
                },
            },
            Destination: &parser.AccountLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:16, Line:2},
                    End:   parser.Position{Character:18, Line:2},
                },
                Name: "d",
            },
        },
    },
}
---

[TestAllotmentPerc - 1]
parser.Program{
    Statements: {
        &parser.SendStatement{
            Range: parser.Range{
                Start: parser.Position{},
                End:   parser.Position{Character:1, Line:6},
            },
            Monetary: &parser.MonetaryLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:5, Line:0},
                    End:   parser.Position{Character:16, Line:0},
                },
                Asset:  "EUR/2",
                Amount: 100,
            },
            Source: &parser.SourceAllotment{
                Range: parser.Range{
                    Start: parser.Position{Character:11, Line:1},
                    End:   parser.Position{Character:3, Line:4},
                },
                Items: {
                    {
                        Range: parser.Range{
                            Start: parser.Position{Character:4, Line:2},
                            End:   parser.Position{Character:16, Line:2},
                        },
                        Allotment: &parser.RatioLiteral{
                            Range: parser.Range{
                                Start: parser.Position{Character:4, Line:2},
                                End:   parser.Position{Character:7, Line:2},
                            },
                            Numerator:   0x2a,
                            Denominator: 0x64,
                        },
                        From: &parser.AccountLiteral{
                            Range: parser.Range{
                                Start: parser.Position{Character:13, Line:2},
                                End:   parser.Position{Character:16, Line:2},
                            },
                            Name: "s1",
                        },
                    },
                    {
                        Range: parser.Range{
                            Start: parser.Position{Character:1, Line:3},
                            End:   parser.Position{Character:13, Line:3},
                        },
                        Allotment: &parser.RatioLiteral{
                            Range: parser.Range{
                                Start: parser.Position{Character:1, Line:3},
                                End:   parser.Position{Character:4, Line:3},
                            },
                            Numerator:   0x1,
                            Denominator: 0x2,
                        },
                        From: &parser.AccountLiteral{
                            Range: parser.Range{
                                Start: parser.Position{Character:10, Line:3},
                                End:   parser.Position{Character:13, Line:3},
                            },
                            Name: "s2",
                        },
                    },
                },
            },
            Destination: &parser.AccountLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:16, Line:5},
                    End:   parser.Position{Character:18, Line:5},
                },
                Name: "d",
            },
        },
    },
}
---

[TestAllotmentPercFloating - 1]
parser.Program{
    Statements: {
        &parser.SendStatement{
            Range: parser.Range{
                Start: parser.Position{},
                End:   parser.Position{Character:1, Line:3},
            },
            Monetary: &parser.MonetaryLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:5, Line:0},
                    End:   parser.Position{Character:16, Line:0},
                },
                Asset:  "EUR/2",
                Amount: 100,
            },
            Source: &parser.SourceAllotment{
                Range: parser.Range{
                    Start: parser.Position{Character:11, Line:1},
                    End:   parser.Position{Character:28, Line:1},
                },
                Items: {
                    {
                        Range: parser.Range{
                            Start: parser.Position{Character:13, Line:1},
                            End:   parser.Position{Character:26, Line:1},
                        },
                        Allotment: &parser.RatioLiteral{
                            Range: parser.Range{
                                Start: parser.Position{Character:13, Line:1},
                                End:   parser.Position{Character:18, Line:1},
                            },
                            Numerator:   0xf2,
                            Denominator: 0x2710,
                        },
                        From: &parser.AccountLiteral{
                            Range: parser.Range{
                                Start: parser.Position{Character:24, Line:1},
                                End:   parser.Position{Character:26, Line:1},
                            },
                            Name: "s",
                        },
                    },
                },
            },
            Destination: &parser.AccountLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:16, Line:2},
                    End:   parser.Position{Character:18, Line:2},
                },
                Name: "d",
            },
        },
    },
}
---

[TestAllotmentDest - 1]
parser.Program{
    Statements: {
        &parser.SendStatement{
            Range: parser.Range{
                Start: parser.Position{},
                End:   parser.Position{Character:1, Line:3},
            },
            Monetary: &parser.MonetaryLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:5, Line:0},
                    End:   parser.Position{Character:16, Line:0},
                },
                Asset:  "EUR/2",
                Amount: 100,
            },
            Source: &parser.AccountLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:11, Line:1},
                    End:   parser.Position{Character:13, Line:1},
                },
                Name: "s",
            },
            Destination: &parser.DestinationAllotment{
                Range: parser.Range{
                    Start: parser.Position{Character:16, Line:2},
                    End:   parser.Position{Character:29, Line:2},
                },
                Items: {
                    {
                        Range: parser.Range{
                            Start: parser.Position{Character:18, Line:2},
                            End:   parser.Position{Character:27, Line:2},
                        },
                        Allotment: &parser.RatioLiteral{
                            Range: parser.Range{
                                Start: parser.Position{Character:18, Line:2},
                                End:   parser.Position{Character:21, Line:2},
                            },
                            Numerator:   0x1,
                            Denominator: 0x2,
                        },
                        To: &parser.AccountLiteral{
                            Range: parser.Range{
                                Start: parser.Position{Character:25, Line:2},
                                End:   parser.Position{Character:27, Line:2},
                            },
                            Name: "d",
                        },
                    },
                },
            },
        },
    },
}
---

[TestCapped - 1]
parser.Program{
    Statements: {
        &parser.SendStatement{
            Range: parser.Range{
                Start: parser.Position{},
                End:   parser.Position{Character:1, Line:3},
            },
            Monetary: &parser.MonetaryLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:5, Line:0},
                    End:   parser.Position{Character:16, Line:0},
                },
                Asset:  "EUR/2",
                Amount: 100,
            },
            Source: &parser.SourceCapped{
                Range: parser.Range{
                    Start: parser.Position{Character:11, Line:1},
                    End:   parser.Position{Character:35, Line:1},
                },
                From: &parser.AccountLiteral{
                    Range: parser.Range{
                        Start: parser.Position{Character:31, Line:1},
                        End:   parser.Position{Character:35, Line:1},
                    },
                    Name: "src",
                },
                Cap: &parser.MonetaryLiteral{
                    Range: parser.Range{
                        Start: parser.Position{Character:15, Line:1},
                        End:   parser.Position{Character:25, Line:1},
                    },
                    Asset:  "EUR/2",
                    Amount: 10,
                },
            },
            Destination: &parser.AccountLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:16, Line:2},
                    End:   parser.Position{Character:21, Line:2},
                },
                Name: "dest",
            },
        },
    },
}
---

[TestCappedVariable - 1]
parser.Program{
    Statements: {
        &parser.SendStatement{
            Range: parser.Range{
                Start: parser.Position{},
                End:   parser.Position{Character:1, Line:3},
            },
            Monetary: &parser.MonetaryLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:5, Line:0},
                    End:   parser.Position{Character:16, Line:0},
                },
                Asset:  "EUR/2",
                Amount: 100,
            },
            Source: &parser.SourceCapped{
                Range: parser.Range{
                    Start: parser.Position{Character:11, Line:1},
                    End:   parser.Position{Character:32, Line:1},
                },
                From: &parser.AccountLiteral{
                    Range: parser.Range{
                        Start: parser.Position{Character:28, Line:1},
                        End:   parser.Position{Character:32, Line:1},
                    },
                    Name: "src",
                },
                Cap: &parser.VariableLiteral{
                    Range: parser.Range{
                        Start: parser.Position{Character:15, Line:1},
                        End:   parser.Position{Character:22, Line:1},
                    },
                    Name: "my_var",
                },
            },
            Destination: &parser.AccountLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:16, Line:2},
                    End:   parser.Position{Character:21, Line:2},
                },
                Name: "dest",
            },
        },
    },
}
---

[TestNested - 1]
parser.Program{
    Statements: {
        &parser.SendStatement{
            Range: parser.Range{
                Start: parser.Position{},
                End:   parser.Position{Character:1, Line:7},
            },
            Monetary: &parser.MonetaryLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:5, Line:0},
                    End:   parser.Position{Character:16, Line:0},
                },
                Asset:  "EUR/2",
                Amount: 100,
            },
            Source: &parser.SourceSeq{
                Range: parser.Range{
                    Start: parser.Position{Character:11, Line:1},
                    End:   parser.Position{Character:3, Line:5},
                },
                Sources: {
                    &parser.SourceCapped{
                        Range: parser.Range{
                            Start: parser.Position{Character:4, Line:2},
                            End:   parser.Position{Character:27, Line:2},
                        },
                        From: &parser.AccountLiteral{
                            Range: parser.Range{
                                Start: parser.Position{Character:23, Line:2},
                                End:   parser.Position{Character:27, Line:2},
                            },
                            Name: "src",
                        },
                        Cap: &parser.MonetaryLiteral{
                            Range: parser.Range{
                                Start: parser.Position{Character:8, Line:2},
                                End:   parser.Position{Character:17, Line:2},
                            },
                            Asset:  "COIN",
                            Amount: 42,
                        },
                    },
                    &parser.AccountLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:1, Line:3},
                            End:   parser.Position{Character:3, Line:3},
                        },
                        Name: "a",
                    },
                    &parser.AccountLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:1, Line:4},
                            End:   parser.Position{Character:3, Line:4},
                        },
                        Name: "b",
                    },
                },
            },
            Destination: &parser.AccountLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:16, Line:6},
                    End:   parser.Position{Character:21, Line:6},
                },
                Name: "dest",
            },
        },
    },
}
---
