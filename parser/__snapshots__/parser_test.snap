[TestPlainAddress - 1]
parser.Program{
    Statements: {
        &parser.SendStatement{
            Range: parser.Range{
                Start: parser.Position{},
                End:   parser.Position{Character:1, Line:3},
            },
            Monetary: &parser.MonetaryLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:5, Line:0},
                    End:   parser.Position{Character:16, Line:0},
                },
                Asset:  "EUR/2",
                Amount: 100,
            },
            Source: &parser.AccountLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:11, Line:1},
                    End:   parser.Position{Character:15, Line:1},
                },
                Name: "src",
            },
            Destination: &parser.AccountLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:16, Line:2},
                    End:   parser.Position{Character:21, Line:2},
                },
                Name: "dest",
            },
        },
    },
}
---

[TestVariable - 1]
parser.Program{
    Statements: {
        &parser.SendStatement{
            Range: parser.Range{
                Start: parser.Position{},
                End:   parser.Position{Character:1, Line:3},
            },
            Monetary: &parser.MonetaryLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:5, Line:0},
                    End:   parser.Position{Character:16, Line:0},
                },
                Asset:  "EUR/2",
                Amount: 100,
            },
            Source: &parser.VariableLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:11, Line:1},
                    End:   parser.Position{Character:27, Line:1},
                },
                Name: "example_var_src",
            },
            Destination: &parser.VariableLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:16, Line:2},
                    End:   parser.Position{Character:33, Line:2},
                },
                Name: "example_var_dest",
            },
        },
    },
}
---

[TestSeq - 1]
parser.Program{
    Statements: {
        &parser.SendStatement{
            Range: parser.Range{
                Start: parser.Position{},
                End:   parser.Position{Character:1, Line:3},
            },
            Monetary: &parser.MonetaryLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:5, Line:0},
                    End:   parser.Position{Character:16, Line:0},
                },
                Asset:  "EUR/2",
                Amount: 100,
            },
            Source: &parser.SourceSeq{
                Range: parser.Range{
                    Start: parser.Position{Character:11, Line:1},
                    End:   parser.Position{Character:22, Line:1},
                },
                Sources: {
                    &parser.AccountLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:13, Line:1},
                            End:   parser.Position{Character:16, Line:1},
                        },
                        Name: "s1",
                    },
                    &parser.AccountLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:17, Line:1},
                            End:   parser.Position{Character:20, Line:1},
                        },
                        Name: "s2",
                    },
                },
            },
            Destination: &parser.DestinationSeq{
                Range: parser.Range{
                    Start: parser.Position{Character:16, Line:2},
                    End:   parser.Position{Character:27, Line:2},
                },
                Destinations: {
                    &parser.AccountLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:18, Line:2},
                            End:   parser.Position{Character:21, Line:2},
                        },
                        Name: "d1",
                    },
                    &parser.AccountLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:22, Line:2},
                            End:   parser.Position{Character:25, Line:2},
                        },
                        Name: "d2",
                    },
                },
            },
        },
    },
}
---
